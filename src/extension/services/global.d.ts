import * as vscode from "vscode";
import { DothttpNameSymbolProvider } from "../codelensprovider";
import { ClientHandler } from "../lib/client";
import { LocalStorageService } from "../services/storage";
import { IHistoryService } from "../tingohelpers";
import DotHttpEditorView from "../views/editor";
import { HistoryTreeProvider } from "../views/historytree";
import { EnvTree, PropertyTree } from "../views/tree";
import { IFileState, VersionInfo } from "./state";
import { Configuration } from "../models/config";
export declare class ApplicationServices {
    private static _state;
    clientHanler: ClientHandler;
    private storageService;
    private fileStateService;
    private envTree;
    private propTree;
    private historyTreeProvider;
    private historyService;
    private dotHttpEditorView;
    private dothttpSymbolProvier;
    private diagnostics;
    private globalstorageService;
    private versionInfo;
    private config;
    constructor(context: vscode.ExtensionContext);
    static get(): ApplicationServices;
    static initialize(context: vscode.ExtensionContext): ApplicationServices;
    postInitialize(): void;
    getClientHandler(): ClientHandler;
    getStorageService(): LocalStorageService;
    getFileStateService(): IFileState;
    getEnvProvder(): EnvTree;
    getPropTreeProvider(): PropertyTree;
    getHistoryTreeProvider(): HistoryTreeProvider;
    setHistoryTreeProvider(value: HistoryTreeProvider): void;
    getDiagnostics(): vscode.DiagnosticCollection;
    setDiagnostics(value: vscode.DiagnosticCollection): void;
    getDothttpSymbolProvier(): DothttpNameSymbolProvider;
    setDothttpSymbolProvier(value: DothttpNameSymbolProvider): void;
    getDotHttpEditorView(): DotHttpEditorView;
    setDotHttpEditorView(value: DotHttpEditorView): void;
    getHistoryService(): IHistoryService;
    setHistoryService(value: IHistoryService): void;
    getGlobalstorageService(): LocalStorageService;
    setGlobalstorageService(value: LocalStorageService): void;
    getVersionInfo(): VersionInfo;
    setVersionInfo(value: VersionInfo): void;
    getCconfig(): Configuration;
    setCconfig(value: Configuration): void;
}
